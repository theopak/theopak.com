What’s the best way to manage source code? I recently joined a project that used <a href="http://wikipedia.org/wiki/Concurrent_Versions_System"><span class="caps">CVS</span></a> to manage an html website and Perl backend, but is looking to switch to modern software. The favorites in the argument between centralized and distributed version control are <a href="ttp://subversion.apache.org/">Subversion</a> and <a href="http://git-scm.com/">Git</a>, respectively. Here’s my take on the issue.

<p>I’m a fan of git, because I like the idea of <a href="http://sethrobertson.github.com/GitBestPractices/#commit">frequent commits</a> and my workflows tend to rely on quick saves, pushes, and reversions when I’m working on a project across various systems and states of connectivity. Below is a very brief comparison of how centralized and distributed version control systems are used. For a more detailed comparison, I recommend <em><a href="http://betterexplained.com/articles/intro-to-distributed-version-control-illustrated/">Intro to Distributed Version Control (Illustrated)</a></em>.</p>

<h1>Centralized Version Control Systems (eg, <a href="http://subversion.apache.org/" title="Subversion (SVN)">svn</a>)</h1>
<div class="full-bleed">
	<img class="img--center" alt="Example of a Centralized VCS Workflow" src="/assets/images/blog/version-control_centralized-example.png">
</div>
<p>There’s a simplicity of use when version control is centralized such that the master repo always has the latest copy. Centralized version control systems enforce a client-server relationship where users commit diffs directly on the repository. There can be multiple branches, but any local repos are&nbsp;unrelated.2</p>
<ul>
	<li>The trunk always contains the latest&nbsp;version.</li>
	<li>All users “see” the same repo at the same&nbsp;time.</li>
	<li>Automated backup is more&nbsp;straightforward.</li>
	<li>Access/permissions can be more easily&nbsp;controlled.</li>
	<li>Tends to be more widely supported, including with desktop&nbsp;GUIs.</li>
</ul>

<h1>Distributed Version Control Systems (eg, <a href="http://git-scm.com/" title="git">git</a>)</h1>
<div class="full-bleed">
	<img class="img--center" alt="Example of a Distributed VCS Workflow" src="/assets/images/blog/version-control_distributed-example.png">
</div>
<p>Version control has inherent advantages in a distributed system where each user must push their commits after working on their local branch. Instead of a single trunk, each user works on their local repository. Committed changes are recorded independently of any other repos/branches/users, and then pushed to or pulled by other repositories. Best practices generally advise that collaborators merge their commits into a “master” repo at the first opportunity so that other developers have access to the latest&nbsp;commits.</p>
<ul>
	<li>Clients do not need to access a central server in order to use version&nbsp;control.</li>
	<li>Usage tends to be much faster than centralized&nbsp;systems.</li>
	<li>Merging is inherently easier and usually&nbsp;automatic.</li>
	<li>It’s helpful to push commits to a central “master”&nbsp;repository.</li>
</ul>

<h1>Notes</h1>
<p>It’s often useful to have a web interface to browse repositories. <a href="http://github.com" title="GitHub">GitHub</a> is extremely popular among open-source projects for providing free git repo hosting that works nicely with extra features like an issues tracker and wiki. Self-hosted projects have a number of open-source options that can be used similarly, including <a href="http://gitorious.org/" title="Gitorious">Gitorious</a> (git) and <a href="http://trac.edgewall.org/" title="Trac">Trac</a> (svn,&nbsp;git).</p>
<p><span class="caps">VCS</span> flowchart images via <a href="http://betterexplained.com/articles/intro-to-distributed-version-control-illustrated/">http://betterexplained.com/articles/intro-to-distributed-version-control-illustrated/</a>.</p>

</section>
